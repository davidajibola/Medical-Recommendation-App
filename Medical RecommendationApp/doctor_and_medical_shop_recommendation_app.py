# -*- coding: utf-8 -*-
"""Doctor and Medical Shop Recommendation App.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MinncHY7mU3t-H8TjBsL505xqs3N9GKh
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import OneHotEncoder
from flask import Flask, request, jsonify
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from geopy.distance import geodesic

# Loading the dataset
data = pd.read_csv('Information.csv')

# Displaying basic information about the dataset
print(data.info())

# Displaying the first few rows of the dataset
print(data.head())

data.isnull().sum()

# Summary statistics of numerical columns
print(data.describe())

# Count of hospitals by hospital type
plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Hospital Type')
plt.xticks(rotation=90)
plt.title('Count of Hospitals by Hospital Type')
plt.show()

# Hospital ownership distribution
plt.figure(figsize=(8, 6))
data['Hospital Ownership'].value_counts().plot(kind='bar')
plt.xticks(rotation=45)
plt.title('Hospital Ownership Distribution')
plt.show()

# Distribution of overall ratings
plt.figure(figsize=(8, 6))
sns.histplot(data=data, x='Hospital overall rating', bins=6, kde=True)
plt.title('Distribution of Hospital Overall Ratings')
plt.show()

# Correlation heatmap of numerical columns
plt.figure(figsize=(12, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# Bar plot of patient experience ratings
plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Patient experience national comparison')
plt.xticks(rotation=90)
plt.title('Distribution of Patient Experience Ratings')
plt.show()

# Count plot of patient experience ratings
plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Patient experience national comparison', hue='Hospital Type')
plt.xticks(rotation=90)
plt.title('Distribution of Patient Experience Ratings by Hospital Type')
plt.legend(title='Hospital Type')
plt.show()

from flask import Flask, request, jsonify
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from geopy.distance import geodesic

app = Flask(__name__)

# Load the hospital data from the CSV file
csv_file_path = 'Information.csv'
hospital_data = pd.read_csv(csv_file_path)

# Preprocess the data
hospital_data['Features'] = (
    hospital_data['State'] + ' ' +
    hospital_data['City'] + ' ' +
    hospital_data['Hospital Type'] + ' ' +
    hospital_data['Hospital Ownership'] + ' ' +
    hospital_data['Emergency Services']
)

# Create a TF-IDF vectorizer
vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = vectorizer.fit_transform(hospital_data['Features'])

# Calculate cosine similarity matrix
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# API route to get hospital recommendations
@app.route('/recommend_hospitals', methods=['GET'])
def recommend_hospitals():
    # Extract relevant user preferences from request parameters
    user_state = request.args.get('state')
    user_city = request.args.get('city')
    user_hospital_type = request.args.get('hospital_type')
    user_hospital_ownership = request.args.get('hospital_ownership')
    user_emergency_services = request.args.get('emergency_services')

    # Create user preferences string
    user_preference = (
        f"{user_state} {user_city} {user_hospital_type} " +
        f"{user_hospital_ownership} {user_emergency_services}"
    )

    # Find the index of the user's preferred hospital
    user_index = hospital_data[hospital_data['Features'] == user_preference].index[0]

    # Get the user's location coordinates (latitude, longitude)
    user_location = (user_state, user_city)  # Replace with actual user location

    # Calculate distances and sort hospitals by proximity
    hospital_data['Distance'] = hospital_data.apply(
        lambda row: geodesic(user_location, (row['State'], row['City'])).kilometers,
        axis=1
    )

    # Sort hospitals based on multiple factors (similarity and proximity)
    hospital_data['RecommendationScore'] = (
        cosine_sim[user_index] + (1 / hospital_data['Distance'])
    )
    recommended_hospitals = hospital_data.sort_values('RecommendationScore', ascending=False).iloc[:10]

    return jsonify(recommended_hospitals.to_dict(orient='records'))

if __name__ == '__main__':
    app.run(debug=True)